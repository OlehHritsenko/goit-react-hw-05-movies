{"version":3,"file":"static/js/387.e042daec.chunk.js","mappings":"0RAEMA,EAAOC,EAAAA,GAAAA,GAAH,khBAqBJC,EAAOD,EAAAA,GAAAA,GAAH,ydAqBJE,EAAQF,EAAAA,GAAAA,IAAH,mRAeLG,EAAcH,EAAAA,GAAAA,IAAH,2TAgBXI,EAAOJ,EAAAA,GAAAA,EAAH,iEAKJK,EAAUL,EAAAA,GAAAA,EAAH,iE,SCZb,EA9Da,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAcA,IAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAE2BC,EAAAA,EAAAA,GAAcR,EAAS,WAFlD,gBAEYS,EAFZ,EAEYA,KACRL,EAAQK,EAAKN,MAHjB,gDAKIG,EAAS,EAAD,IALZ,0DADc,uBAAC,WAAD,wBASdI,EACD,GAAE,CAACV,KAECG,EACH,OAAO,KAIT,OACE,gCACmB,IAAhBA,EAAKQ,SAAgB,iEACrBR,EAAKQ,OAAS,IAAMN,IACnB,SAACZ,EAAD,UACGU,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IACED,EAAY,yCAC0BA,GAXtC,qFAcFE,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAET,UAACvB,EAAD,YACE,SAACC,EAAD,UAAOgB,KACP,UAACf,EAAD,yBAAqBgB,UAbdF,EADH,KADDb,KAuBlB,C,4ICpDKqB,EAAW,gCACXC,EAAU,mC,SAUDC,EAAU,GAAVA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,8EACQC,EAAgBC,EAAAA,EAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAL,OAAgBG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KALf,SASeG,EAAcM,MAT7B,mHAYevB,EAAc,EAAdA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA6BK,EAAImB,GAAjC,kFACQC,EAAUD,EAAI,WAAOA,GAAS,GAC9BR,EAFR,gBAE8BX,GAF9B,OAEmCoB,GAC3BR,EAAgBC,EAAAA,EAAAA,OAAa,CACjCC,QAAQ,GAAD,OAAKN,GAAL,OAAgBG,GACvBI,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,CACNC,QAASR,KAPf,SAWeG,EAAcM,MAX7B,0GAcAR,EAAUW,UAAY,CACpBV,WAAYW,IAAAA,OAAAA,WACZtB,GAAIsB,IAAAA,OAAAA,WACJH,KAAMG,IAAAA,O","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/ApiService.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  gap: 15px;\n  margin-left: auto;\n  margin-right: auto;\n  @media screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 20px;\n  }\n  @media screen and (min-width: 1280px) {\n    grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\n    grid-auto-rows: auto;\n    grid-gap: 32px 16px;\n  }\n`;\n\nconst Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding: 10px;\n  width: 100%;\n  height: auto;\n  border: 3px solid rgba(132, 132, 132, 0.5);\n  border-radius: 4px;\n  box-shadow: 0px 7px 10px -2px rgba(132, 132, 132, 0.5);\n  @media screen and (min-width: 320px) {\n    max-width: 180px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 200px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 230px;\n  }\n`;\n\nconst Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n  @media screen and (min-width: 320px) {\n    width: 150px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 200px;\n  }\n`;\n\nconst TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 100px;\n  @media screen and (min-width: 320px) {\n    max-width: 150px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 170px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 200px;\n  }\n`;\n\nconst Name = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Content = styled.p`\n  font-size: 12px;\n  font-weight: 400;\n`;\n\nexport { List, Item, Image, TextWrapper, Name, Content };","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchDataByID } from 'services/ApiService';\nimport { List, Item, Image, TextWrapper, Name, Content } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const { data } = await fetchDataByID(movieId, 'credits');\n        setCast(data.cast);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    getData();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  const imgDefault = `https://cdn.pixabay.com/photo/2019/01/26/20/22/public-speaking-3956908_960_720.jpg`;\n  return (\n    <>\n      {cast.length === 0 && <div>We don't have a cast for this movie</div>}\n      {cast.length > 0 && !error && (\n        <List key={movieId}>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <Image\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : imgDefault\n                }\n                alt={name}\n                width=\"100\"\n                height=\"160\"\n              />\n              <TextWrapper>\n                <Name>{name}</Name>\n                <Content>Character: {character}</Content>\n              </TextWrapper>\n            </Item>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3cfb780db79e54922c50ea8f26b92bbe';\n\n// const pathParams = [\n//   { trend: 'trending/movie/day' },\n//   { search: 'search/movie' },\n//   { movieDetails: `movie/${movieId}` },\n//   { cast: `movie/${movieId}/credits` },\n//   { reviews: `movie/${movieId}/reviews` },\n// ];\n\nasync function fetchData(pathParams) {\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nasync function fetchDataByID(id, path) {\n  const pathURL = path ? `/${path}` : '';\n  const pathParams = `movie/${id}${pathURL}`;\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`,\n    headers: { 'Content-Type': 'application/json' },\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nfetchData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  path: PropTypes.string,\n};\n\nexport { fetchData, fetchDataByID };\n"],"names":["List","styled","Item","Image","TextWrapper","Name","Content","movieId","useParams","useState","cast","setCast","error","setError","useEffect","fetchDataByID","data","getData","length","map","id","name","character","profile_path","src","alt","width","height","BASE_URL","API_KEY","fetchData","pathParams","axiosInstance","axios","baseURL","headers","params","api_key","get","path","pathURL","propTypes","PropTypes"],"sourceRoot":""}